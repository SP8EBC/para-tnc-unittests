#include "backup_registers.h"
#include <stdint.h>

#include <boost/test/unit_test.hpp>

const char* CONCURENT_ACCES_APRSIS_WX = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_WX\0";
const char* CONCURENT_ACCES_APRSIS_BEACON = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_BEACON\0";
const char* CONCURENT_ACCES_APRSIS_TELEMETRY = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_TELEMETRY\0";
const char* CONCURENT_ACCES_APRSIS_DESCR = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_DESCR\0";
const char* CONCURENT_ACCES_APRSIS_IGATE = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_IGATE\0";
const char* CONCURENT_ACCES_APRSIS_CNTRS = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_CNTRS\0";
const char* CONCURENT_ACCES_APRSIS_LOGINSTRING = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_LOGINSTRING\0";
const char* CONCURENT_ACCES_APRSIS_OTHER = "BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_OTHER\0";
const char* ERASE_WHILE_STORING_EVENT = "BACKUP_REG_ASSERT_ERASE_FAIL_WHILE_STORING_EVENT\0";

char* message = 0;

void backup_assert(uint32_t assert)
{
	char msg_output[128];
	switch (assert) {
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_WX: message = (char*)CONCURENT_ACCES_APRSIS_WX; break;
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_BEACON: message = (char*)CONCURENT_ACCES_APRSIS_BEACON; break;
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_TELEMETRY: message = (char*)CONCURENT_ACCES_APRSIS_TELEMETRY; break;
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_DESCR: message = (char*)CONCURENT_ACCES_APRSIS_DESCR; break;
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_IGATE: message = (char*)CONCURENT_ACCES_APRSIS_IGATE; break;
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_CNTRS: message = (char*)CONCURENT_ACCES_APRSIS_CNTRS; break;
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_LOGINSTRING: message = (char*)CONCURENT_ACCES_APRSIS_WX; break;
		case BACKUP_REG_ASSERT_CONCURENT_ACCES_APRSIS_OTHER: message = (char*)CONCURENT_ACCES_APRSIS_LOGINSTRING; break;
		case BACKUP_REG_ASSERT_ERASE_FAIL_WHILE_STORING_EVENT: message = (char*)ERASE_WHILE_STORING_EVENT; break;
		default: message = "";
	}
	snprintf(msg_output, 128, "assert failure %s has been detected!!", message);
	BOOST_TEST_MESSAGE(msg_output);
	BOOST_ASSERT(assert == 0x00);
}

uint32_t backup_reg_get_register_reset_check_fail() {
	return 0;
}
